{
    "openapi": "3.0.0",
    "info": {
        "version": "1.0.0",
        "title": "Kanban board REST API",
        "description": "This is a Kanban Board REST API application made with Express,MongoDB,Redis and Docker and documented with Swagger. <br\/> ",
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "contact": {
            "url": "https://github.com/Soufianetyk1337"
        }
    },
    "servers": [
        {
            "url": "/api/v1",
            "description": "With docker-compose"
        }
    ],
    "tags": [
        {
            "name": "ping"
        },
        {
            "name": "Users",
            "description": "API for user in the database"
        },
        {
            "name": "Boards",
            "description": "API for user boards in the database"
        },
        {
            "name": "Sections",
            "description": "API for user section in each boards in the database"
        },
        {
            "name": "Tasks",
            "description": "API for user tasks in each section in the database"
        }
    ],
    "paths": {
        "/ping": {
            "get": {
                "tags": [
                    "ping"
                ],
                "summary": "Check API status",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/users/register": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Register a user to the application",
                "requestBody": {
                    "description": "Registering a user and sending an activation link to his email account",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserRegister"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User created"
                    },
                    "409": {
                        "description": "Conflict."
                    }
                }
            }
        },
        "/users/login": {
            "post": {
                "tags": [
                    "Users"
                ],
                "security": [],
                "summary": "Authenticates a customer to the application",
                "requestBody": {
                    "description": "User  can authenticate after registration",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserLogin"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User successfully authenticated. The session ID is returned in a cookie named `sid`. You need to include this cookie in subsequent requests.",
                        "headers": {
                            "Set-Cookie": {
                                "schema": {
                                    "type": "string",
                                    "example": "sid=s%3Ahd2-mgniWsGz8plZCqcfsx1PqooBiRB5.F1WeG0SONYBuCqY0MTcgQE4nssCrU4dsRg6ZdAIrrMI"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid email or password"
                    },
                    "429": {
                        "description": "Too many requests"
                    }
                }
            }
        },
        "/users/logout": {
            "delete": {
                "tags": [
                    "Users"
                ],
                "summary": "Logout a user from the application",
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User logged out."
                    },
                    "401": {
                        "description": "Unauthorized."
                    }
                }
            }
        },
        "/users/password/reset": {
            "patch": {
                "tags": [
                    "Users"
                ],
                "summary": "Sends a request to change password",
                "parameters": [
                    {
                        "in": "query",
                        "name": "id",
                        "required": true,
                        "description": "ID of the user that we want to match",
                        "schema": {
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "required": [
                                        "true"
                                    ]
                                }
                            }
                        }
                    },
                    {
                        "in": "query",
                        "name": "token",
                        "required": true,
                        "description": "token of the user that we want to match",
                        "schema": {
                            "properties": {
                                "token": {
                                    "type": "string",
                                    "required": [
                                        "true"
                                    ]
                                }
                            }
                        }
                    }
                ],
                "requestBody": {
                    "description": "User password reset request",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "password": {
                                        "type": "string",
                                        "required": [
                                            "true"
                                        ],
                                        "format": "password"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User logged out."
                    },
                    "400": {
                        "description": "Password reset link expired."
                    }
                }
            }
        },
        "/users/password/confirm": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Sends a request to confirm password",
                "requestBody": {
                    "description": "User should confirm his password if he changes some critical data ",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "password": {
                                        "type": "string",
                                        "required": [
                                            "true"
                                        ],
                                        "format": "password"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Password confirmed successfully."
                    },
                    "401": {
                        "description": "Password is incorrect."
                    }
                }
            }
        },
        "/users/password/forgot": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Sends a request to forgot password",
                "requestBody": {
                    "description": "Send a reset password link to the user email to reset his password",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "required": [
                                            "true"
                                        ],
                                        "format": "email"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Reset password link sent to your email"
                    },
                    "401": {
                        "description": "Invalid Email"
                    }
                }
            }
        },
        "/users/email/verify": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Send a request to activate user account",
                "parameters": [
                    {
                        "in": "query",
                        "name": "id",
                        "required": true,
                        "description": "ID of the user that we want to match",
                        "schema": {
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "required": [
                                        "true"
                                    ]
                                }
                            }
                        }
                    },
                    {
                        "in": "query",
                        "name": "verificationToken",
                        "required": true,
                        "description": "token of the user that we want to match",
                        "schema": {
                            "properties": {
                                "verificationToken": {
                                    "type": "string",
                                    "required": [
                                        "true"
                                    ]
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "You have succesfully verified your account"
                    },
                    "400": {
                        "description": "Your verification link expired"
                    },
                    "401": {
                        "description": "Please check your email for verification link"
                    }
                }
            }
        },
        "/boards/": {
            "get": {
                "tags": [
                    "Boards"
                ],
                "summary": "Get all boards for a specifig user.",
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return all boards as JSON if there is any boards for that user."
                    },
                    "401": {
                        "description": "Unauthorized."
                    }
                }
            },
            "post": {
                "tags": [
                    "Boards"
                ],
                "security": [],
                "summary": "Add new board for a specific user.",
                "requestBody": {
                    "description": "User can add boards after authentication",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NewBoard"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Baord successfully created."
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "429": {
                        "description": "Too many requests"
                    }
                }
            },
            "put": {
                "tags": [
                    "Boards"
                ],
                "security": [],
                "summary": "Updating boards positions.",
                "requestBody": {
                    "description": "User can change boards positions with drag and drop in the UI.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BoardPositionUpdateOrToggleFavorite"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Baords successfully updated."
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "429": {
                        "description": "Too many requests"
                    }
                }
            }
        },
        "/boards/favorites": {
            "get": {
                "tags": [
                    "Boards"
                ],
                "security": [],
                "summary": "Get all favorites boards.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "boardId",
                        "schema": {
                            "type": "string",
                            "example": "63f6062faab2f342ba1f6a09"
                        },
                        "required": true,
                        "description": "Board ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return all favorites boards.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BoardPositionUpdateOrToggleFavorite"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "429": {
                        "description": "Too many requests"
                    }
                }
            },
            "put": {
                "tags": [
                    "Boards"
                ],
                "security": [],
                "summary": "Updating favorite boards position (UI drag and drop).",
                "parameters": [
                    {
                        "in": "path",
                        "name": "boardId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Board ID"
                    }
                ],
                "requestBody": {
                    "description": "User can toggle the favorite status for his boards.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BoardPositionUpdateOrToggleFavorite"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "favorite baords updated succesfully."
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "429": {
                        "description": "Too many requests"
                    }
                }
            }
        },
        "/boards/{boardId}": {
            "get": {
                "tags": [
                    "Boards"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "boardId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Board ID"
                    }
                ],
                "security": [],
                "summary": "Get one board.",
                "responses": {
                    "200": {
                        "description": "Return current board."
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "429": {
                        "description": "Too many requests"
                    }
                }
            },
            "put": {
                "tags": [
                    "Boards"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "boardId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Board ID"
                    }
                ],
                "security": [],
                "summary": "Update one board.",
                "requestBody": {
                    "description": "User can update boards after authentication",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Board"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Return current updated board."
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "429": {
                        "description": "Too many requests"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Boards"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "boardId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Board ID"
                    }
                ],
                "security": [],
                "summary": "Delete one board.",
                "responses": {
                    "200": {
                        "description": "Board deleted succesfully."
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "429": {
                        "description": "Too many requests"
                    }
                }
            }
        },
        "/boards/{boardId}/sections": {
            "post": {
                "tags": [
                    "Sections"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "boardId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Board ID"
                    }
                ],
                "security": [],
                "summary": "Create section in the current board.",
                "responses": {
                    "200": {
                        "description": "Create new section with default values in the current board."
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "429": {
                        "description": "Too many requests"
                    }
                }
            }
        },
        "/boards/{boardId}/sections/{sectionId}": {
            "put": {
                "tags": [
                    "Sections"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "boardId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Board ID"
                    },
                    {
                        "in": "path",
                        "name": "sectionId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Section ID"
                    }
                ],
                "security": [],
                "summary": "Create section in the current board.",
                "requestBody": {
                    "description": "Updating a section in the a current board.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Section"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Create new section with default values in the current board."
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "429": {
                        "description": "Too many requests"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Sections"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "boardId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Board ID"
                    },
                    {
                        "in": "path",
                        "name": "sectionId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Section ID"
                    }
                ],
                "security": [],
                "summary": "Delete the section with sectionId in the current board.",
                "responses": {
                    "200": {
                        "description": "Delete a section in the current board."
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "429": {
                        "description": "Too many requests"
                    }
                }
            }
        },
        "/boards/{boardId}/tasks/": {
            "post": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Create a task in a board for a specific section.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "boardId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Board ID"
                    }
                ],
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return current created task."
                    },
                    "401": {
                        "description": "Unauthorized."
                    }
                }
            }
        },
        "/boards/{boardId}/tasks/update-position": {
            "post": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Create a task in a board for a specific section.",
                "requestBody": {
                    "description": "Updating a task position.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateTaskPosition"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "boardId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Board ID"
                    }
                ],
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return current created task."
                    },
                    "401": {
                        "description": "Unauthorized."
                    }
                }
            }
        },
        "/boards/{boardId}/tasks/{taskId}": {
            "delete": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Create a task in a board for a specific section.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "boardId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Board ID"
                    },
                    {
                        "in": "path",
                        "name": "taskId",
                        "schema": {
                            "type": "string"
                        },
                        "required": true,
                        "description": "Task ID"
                    }
                ],
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task deleted successfullys."
                    },
                    "401": {
                        "description": "Unauthorized."
                    }
                }
            }
        }
    },
    "components": {
        "securitySchemes": {
            "cookieAuth": {
                "type": "apiKey",
                "in": "cookie",
                "name": "sid"
            }
        },
        "schemas": {
            "UserRegister": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email"
                    },
                    "name": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string",
                        "format": "password"
                    },
                    "confirmPassword": {
                        "type": "string",
                        "format": "password"
                    }
                }
            },
            "UserLogin": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email"
                    },
                    "password": {
                        "type": "string",
                        "format": "password"
                    }
                }
            },
            "NewBoard": {
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "icon": {
                        "type": "string",
                        "format": "icon"
                    }
                }
            },
            "Board": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "user": {
                        "type": "string"
                    },
                    "title": {
                        "type": "string",
                        "default": "Untitled"
                    },
                    "description": {
                        "type": "string",
                        "default": "Insert a description."
                    },
                    "position": {
                        "type": "number"
                    },
                    "favorite": {
                        "type": "boolean",
                        "default": "false"
                    }
                }
            },
            "BoardPositionUpdateOrToggleFavorite": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Board"
                }
            },
            "Section": {
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "Task": {
                "type": "object",
                "properties": {
                    "section": {
                        "type": "string"
                    },
                    "title": {
                        "type": "string",
                        "default": " "
                    },
                    "content": {
                        "type": "string",
                        "default": " "
                    }
                }
            },
            "UpdateTaskPosition": {
                "type": "object",
                "properties": {
                    "sourceTasks": {
                        "type": "array",
                        "$ref": "#/components/schemas/Task"
                    },
                    "destinationTasks": {
                        "type": "array",
                        "$ref": "#/components/schemas/Task"
                    },
                    "resourceSectionId": {
                        "type": "string"
                    },
                    "destinationSectionId": {
                        "type": "string"
                    }
                }
            }
        }
    }
}